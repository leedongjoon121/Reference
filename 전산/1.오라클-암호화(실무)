# 오라클 암호화

* [1.양방향 암호화 예제](#양방향암호화)
* [2.단방향 암호화 예제](#단방향암호화)

### 오라클 DB에서 데이터 암호화시 'DBMS_CRYPTO' 패키지를 사용한다.
- dbms_crypto 패키지는 오라클 설치시 설치 된다. 
- DBMS_CRYPTO 패키지는 여러 함수와 프로시저로 구성되어 있다. 
- 이 패키지는 암호화 해시 함수로부터 DES, AES 등의 암호화 알고리즘을 이용해 데이터를 암호화하고 복호화 할 수있는 함수, 프로시저 제공

### DBMS_CRYPTO 패키지에서 구현 가능한 암호화 알고리즘
```
• DES (Data Encryption Standard): NIST(미국 국립표준기술연구소, National Institute of Standards and Technology)에서 미국 표준으로 정했던 56비트 대칭키를 사용한 알고리즘인데, 취약점이 발견되어 표준에서 제외되었고 NIST에서는 사용권고를 철회했다.

• 3DES: DES 알고리즘을 세 번 반복하여 적용한 알고리즘이다.

• AES (Advanced Encryption Standard): DES를 대체하기 위해 NIST에서 공모를 실시해 선택한 알고리즘으로 현재 미국 표준으로 확정되었다. 공모로 미국 표준으로 확정된 대칭형 알고리즘이므로 안전성도 어느 정도 입증되었고 많이 사용되는 암호화 알고리즘이다.

• RC4 (Advanced Encryption Standard): 가장 널리 사용되는 스트림 암호화 방식으로 무작위 치환에 기반을 두고 있다.

• MD5 (Message-Digest algorithm5)와 MD4: 128비트 암호화 해시 함수로 프로그램이나 파일이 원본 그대로인지 확인하는 무결성 검사 등에 사용되는데 결함이 있다고 알려져 있다. 해시 함수는 단방향 암호화 방법으로, 즉 암호화는 가능하지만 복호화가 매우 어려운 것이 특징이다. MD4는 MD5의 초기 버전이다.

• SHA-1 (Secure Hash Algorithm-1): 160비트 해시 값을 만들어내는 암호화 해시 함수로 MD5 보다는 한 단계 나은 버전이다.

• MAC(Message Authentication Code, 메시지인증코드): MD5, SHA-1 같은 단방향 암호화 해시 함수인데 이들과 다른 점은 비밀키를 입력 받아 사용한다는 점이다.

이번에는 암호화 방식에 대해 알아 보자. 주로 사용되는 암호화 방식은 블록 암호화 방식인데 블록 암호화란 암호화 대상 데이터의 길이가 블록 길이보다 크면 이 데이터를 블록 단위로 잘라 암호화 알고리즘을 적용해 암호화를 하는 방식을 말한다. DES, 3DES, AES 등도 모두 블록 암호화 방식이다. 블록 암호화는 여러 가지 방식으로 처리되는데 이 방식을 블록 암호화 모드라 하고 다음과 같이 5가지 모드가 있다.

• ECB(Electric CodeBook): 데이터를 여러 블록으로 나누어 각각 암호화하는 방식으로 모든 블록을 같은 키로 암호화하기 때문에 취약한 방식이다. 사용하지 않는 것이 좋다.

• CBC(Cipher Block Chaining): 이전 블록의 암호화된 결과와 현재 블록을 XOR 연산을 한 다음 이 결과를 다시 암호화하는 방식으로 사용이 권장되는 방식이다. 이전 블록과 연결해야 하므로 체인(Chaining)이라는 이름이 붙은 것이다. 맨 처음 블록은 암호화된 이전 블록이 없으므로 초기화 벡터(Initialization Vector)라는 것을 사용한다. 또한 원본 데이터를 블록으로 자를 때 잘라낸 마지막 블록이 항상 블록 단위 길이와 맞아 떨어지는 것이 아니므로 부족한 길이를 0이나 임의의 비트로 채우는데 이를 패딩이라고 한다.

• CFB(Cipher-FeedBack): CBC를 변형한 방식으로 암호화된 이전 블록을 키 스트림(key stream) 으로 암호화 한 뒤, 이를 현재 블록과 XOR 연산을 한다.

• OFB(Output-FeedBack) 모드: 원본 블록과 암호 알고리즘의 결과를 XOR 연산하는 방식

• CTR(CounTeR) 모드: 블록을 암호화할 때 1씩 증가하는 카운터를 암호화 해서 키 스트림을 만들어내는 방식

```


#### 1. 암호화 알고리즘 상수
- ENCRYPT_DES: DES 암호화 알고리즘. 유효 키 길이는 56비트
- EMCRYPT_3DES_2KEY: DES 알고리즘을 2키로 3번 블록을 암호화한다. 유효키 길이는 112비트
- ENCRYPT_3DES: DES 알고리즘을 사용해 블록을 3번 암호화
- ENCRYPT_AES128: AES 블록 암호화로 128 비트 키를 사용
- ENCRYPT_AES192: AES 블록 암호화로 192 비트 키를 사용
- ENCRYPT_AES256: AES 블록 암호화로 256 비트 키를 사용
- ENCRYPT_RC4: 스트림 암호화 방식. 각 세션에 따라 무작위로 유일한 키를 생성

#### 2. 블록 암호화 모드 관련 상수
- CHAIN_ECB: ECB 모드
- CHAIN_CBC: CBC 모드
- CHAIN_CFB: CFB 모드
- CHAIN_OFB: OFB 모드

#### 3. 패딩관련 상수
- PAD_PKCS5: PKCS5(비밀번호 기반 암호화 표준, Password-based Encryption Standard)로 이루어진 패딩
- PAD_NONE: 패딩이 없음을 의미
- PAD_ZERO: 0으로 이루어진 패딩

#### 4. 암호화 슈트 관련 상수
암호화 슈트란 “암호화 알고리즘 + 암호화 모드 + 패딩”이 결합된 것을 의미하며, DBMS_CRYPTO 패키지의 암호화 관련 함수와 프로시저는 이런 암호화 슈트를 매개변수로 받아 데이터를 암호화한다.

- DES_CBC_PKCS5: ENCRYPT_DES + CHAIN_CBC + PAD_PKCS5 가 결합된 슈트
- DES3_CBC_PKCS5: ENCRYPT_3DES + CHAIN_CBC + PAD_PKCS5 가 결합된 슈트

#### 5. 암호화 해시 함수 관련 상수
- HASH_MD4: MD4 . 128비트 해시
- HASH_MD5: MD5. 128비트 해시
- HASH_SH1: SH1. 160비트 해시

#### 6. MAC 함수 관련 상수
• HMAC_MD5: 해시 값을 검증하기 위해 비밀키를 사용하는 점만 제외하면 MD5와 같다.
• HMAC_SH1: 해시 값을 검증하기 위해 비밀키를 사용하는 점만 제외하면 SHA1과 같다.

#### 7. ENCRYPT 함수
암호화를 수행하는 함수로 키와 암호화 대상 데이터를 입력받아 암호화한 결과를 반환한다. 매개변수인 대상 데이터, 암호화 키를 비롯해 반환하는 암호화 데이터까지 모두 RAW 타입이다. 구문과 주요 필드는 다음과 같다.

```swift
    DBMS_CRYPTO.ENCRYPT(
         src IN RAW,
         typ IN PLS_INTEGER,
         key IN RAW,
         iv  IN RAW DEFAULT NULL)
    RETURN RAW;
```

• src: 암호화할 대상 데이터
• typ: 암호화에 사용될 슈트
• key: 암호화 키
• iv: 초기화 벡터

ENCRYPT 함수는 key를 입력받아 typ에 입력되는 암호화 슈트 방식으로 src 데이터를 암호화 한 다음 그 결과를 반환한다. 암호화 대상이 VARCHAR2 타입이라면 이를 AL32UTF8 문자셋의 VARCHAR2로 변환해야 한다. 그리고 src 매개변수가 RAW 타입이므로 변환 결과를 다시 RAW 타입으로 변환하는 과정을 거쳐야 하는데, 다음과 같이 UTL_I18N.STRING_TO_RAW 함수를 사용해서 변환할 수 있다.

```
    UTL_I18N.STRING_TO_RAW ('입력문자열', 'AL32UTF8');
```

#### 8. ENCRYPT 프로시저
ECCRYPT 함수와 같은 기능을 수행하지만 함수가 아닌 프로시저로 암호화 한 결과를 OUT 변수에 담는다. 이 프로시저는 매개변수 타입이 다른 두 가지 형태가 있다.

```swift
    DBMS_CRYPTO.ENCRYPT(
        dst IN OUT NOCOPY BLOB,
        src IN BLOB,
        typ IN PLS_INTEGER,
        key IN RAW,
        iv  IN RAW DEFAULT NULL);
```             
• dst: 암호화 결과
• src: 암호화 대상, BLOB 타입
• typ: 암호화 슈트
• key: 암호화 키
• iv: 초기화 벡터

```swift
    DBMS_CRYPTO.ENCRYPT(
        dst IN OUT NOCOPY BLOB,
        src IN CLOB CHARACTER SET ANY_CS,
        typ IN PLS_INTEGER,
        key IN RAW,
        iv  IN RAW DEFAULT NULL);
```

• dst: 암호화 결과
• src: 암호화 대상, CLOB 타입
• typ: 암호화 슈트
• key: 암호화 키
• iv: 초기화 벡터

ENCRYPT 함수는 암호화 대상과 결과가 모두 RAW 타입이었지만, ENCRYPT 프로시저는 BLOB 혹은 CLOB 타입이다.

#### 9. DECRYPT 함수
암호화된 데이터를 매개변수로 받아 복호화 결과를 반환하는 함수다.

```swift
    DBMS_CRYPTO.DECRYPT(
         src IN RAW,
         typ IN PLS_INTEGER,
         key IN RAW,
         iv  IN RAW DEFAULT NULL)
         RETURN RAW;
```

• src: 복호화 대상 데이터
• typ: 복호화에 사용될 암호화 슈트
• key: 암호화 키
• iv: 초기화 벡터

암호화된 RAW 타입을 받아 복호화 한 후, 그 결과를 반환하는데 반환되는 데이터도 RAW 타입이다. 따라서 복호화 결과를 문자형으로 변환하려면 먼저 RAW 타입을 ‘AL32UTF8’ 문자셋의 VARCHAR2로 변환한 다음 다시 변환을 원하는 문자셋의 VARCHAR2 타입으로 변환하는 과정을 거쳐야 하며, 다음과 같이 UTL_I18N.RAW_TO_CHAR 함수를 사용해서 변환한다.

```
    UTL_I18N.RAW_TO_CHAR ('입력문자열', 'AL32UTF8');
```    
복호화할 때 주의할 점은, DECRYPT 함수를 사용하여 복호화하려면 암호화 할 때 사용했던 키와 암호화 슈트가 일치해야만 제대로 복호화 될 수 있다.

#### 10. DECRYPT 프로시저
DECRYPT 함수와 같은 기능을 수행하는 프로시저로 암호화 한 결과를 OUT 변수에 담는다. 이 프로시저도 매개변수 타입이 다른 두 가지 형태가 있다.

```swift
    DBMS_CRYPTO.DECRYPT(
        dst IN OUT NOCOPY BLOB,
        src IN BLOB,
        typ IN PLS_INTEGER,
        key IN RAW,
        iv  IN RAW DEFAULT NULL);
```        
• dst: 복호화 결과 데이터, BLOB 타입
• src: 복호화 대상 데이터
• typ: 복호화에 사용될 암호화 슈트
• key: 암호화 키
• iv: 초기화 벡터

```swift
    DBMS_CRYPT.DECRYPT(
        dst IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
        src IN BLOB,
        typ IN PLS_INTEGER,
        key IN RAW,
        iv  IN RAW DEFAULT NULL);
```        
• dst: 복호화 결과 데이터, CLOB 타입
• src: 복호화 대상 데이터
• typ: 복호화에 사용될 암호화 슈트.
• key: 암호화 키
• iv: 초기화 벡터

DECRYPT 프로시저 역시 복호화 대상 및 결과 데이터의 타입은 BLOB 혹은 CLOB 타입이다.

#### 11. HASH 함수
MD4, MD5, SHA-1 을 사용해 해시 값을 생성해 반환하는 함수로 3가지 형태가 있다.
```swift
    DBMS_CRYPTO.HASH(
         src IN RAW,
         typ IN PLS_INTEGER)
         RETURN RAW;
     
    DBMS_CRYPTO. HASH(
         src IN BLOB,
         typ IN PLS_INTEGER)
         RETURN RAW;
     
    DBMS_CRYPTO. HASH(
         src IN CLOB CHARACTER SET ANY_CS,
         typ IN PLS_INTEGER)
         RETURN RAW;
```

• src: 해시 값으로 변환할 데이터
• typ: HASH_MD4, HASH_MD5, HASH_SH1 중 선택

오라클에서는 MD4나 MD5 보다는 좀더 안전한 방법인 SHA-1, 즉 typ 매개변수로 ‘HASH_SH1’을 사용하도록 권고하고 있다. HASH 함수의 매개변수 역시 RAW 타입이므로 VARCHAR2 데이터가 입력됐을 때 RAW로 변환해야 하는데 이 때는 UTL_RAW.CAST_TO_RAW 함수를 사용한다. 또한 이 함수가 반환한 RAW 타입을 VARCHAR2로 보려면 RAWTOHEX 함수를 사용한다.

#### 12. MAC 함수
HASH 함수와 비슷하나 매개변수로 사용할 비밀키를 더 입력받는다. MAC 함수 역시 3가지 형태가 있다.

```swift
    DBMS_CRYPTO.MAC (
         src IN RAW,
         typ IN PLS_INTEGER,
         key IN RAW)
         RETURN RAW;

     DBMS_CRYPTO.MAC (
         src IN BLOB,
         typ IN PLS_INTEGER
         key IN RAW)
         RETURN RAW;
     
    DBMS_CRYPTO.MAC (
         src IN CLOB CHARACTER SET ANY_CS,
         typ IN PLS_INTEGER
         key IN RAW)
         RETURN RAW;
```

• src: 해시 값으로 변환할 데이터.
• typ: HMAC_MD5, HMAC_SH1 중 선택.
• key: 비밀키

#### 13. RANDOMBYTES 함수
암호화 요건을 충족시키는 안전한 무작위 난수 바이트(RAW 타입) 값을 반환하는데, 보통 암호화 키를 생성할 때 사용된다.

```swift
    DBMS_CRYPTO.RANDOMBYTES (
        number_bytes IN POSITIVE)
        RETURN RAW;
```        
• number_bytes: 생성할 무작위 난수 바이트 수

이 외에도 RANDOMINTEGER, RANDOMNUMBER 함수가 있는데 이들 모두 무작위 값을 생성해 반환한다.

<hr/>
<hr/>

# 예제

# 양방향암호화

```swift

 DECLARE
      input_string  VARCHAR2 (200) := 'The Oracle';  -- 암호화할 VARCHAR2 데이터
      output_string VARCHAR2 (200); -- 복호화된 VARCHAR2 데이터

      encrypted_raw RAW (2000); -- 암호화된 데이터
      decrypted_raw RAW (2000); -- 복호화할 데이터

      num_key_bytes NUMBER := 256/8; -- 암호화 키를 만들 길이 (256 비트, 32 바이트)
      key_bytes_raw RAW (32);        -- 암호화 키

      -- 암호화 슈트
      encryption_type PLS_INTEGER;

    BEGIN
     -- 암호화 슈트 설정
     encryption_type := DBMS_CRYPTO.ENCRYPT_AES256 + -- 256비트 키를 사용한 AES 암호화
                        DBMS_CRYPTO.CHAIN_CBC +      -- CBC 모드
                        DBMS_CRYPTO.PAD_PKCS5;       -- PKCS5로 이루어진 패딩

       DBMS_OUTPUT.PUT_LINE ('원본 문자열: ' || input_string);

       -- RANDOMBYTES 함수를 사용해 암호화 키 생성
       key_bytes_raw := DBMS_CRYPTO.RANDOMBYTES (num_key_bytes);

       -- ENCRYPT 함수로 암호화를 한다. 원본 문자열을 UTL_I18N.STRING_TO_RAW를 사용해 RAW 타입으로 변환한다.
       encrypted_raw := DBMS_CRYPTO.ENCRYPT ( src => UTL_I18N.STRING_TO_RAW (input_string, 'AL32UTF8'),
                                              typ => encryption_type,
                                              key => key_bytes_raw
                                            );

       -- 암호화된 RAW 데이터를 한번 출력해보자
       DBMS_OUTPUT.PUT_LINE('암호화된 RAW 데이터: ' || encrypted_raw);
       -- 암호화 한 데이터를 다시 복호화 ( 암호화했던 키와 암호화 슈트는 동일하게 사용해야 한다. )
       decrypted_raw := DBMS_CRYPTO.DECRYPT ( src => encrypted_raw,
                                              typ => encryption_type,
                                              key => key_bytes_raw
                                            );

       -- 복호화된 RAW 타입 데이터를 UTL_I18N.RAW_TO_CHAR를 사용해 다시 VARCHAR2로 변환
       output_string := UTL_I18N.RAW_TO_CHAR (decrypted_raw, 'AL32UTF8');

       -- 복호화된 문자열 출력
       DBMS_OUTPUT.PUT_LINE ('복호화된 문자열: ' || output_string);
    END;

```

결과

    원본 문자열: The Oracle
    암호화된 RAW 데이터: 139CA77B810FDCF9AC0B2113D8FCCF67
    복호화된 문자열: The Oracle

결과를 보면 ‘The Oracle’이란 문자열을 ENCRYPT 함수를 사용해 RAW 타입(139CA77B810FDCF9AC0B2113D8FCCF67)으로 암호화 한 후, 이를 다시 DECRYPT 함수를 사용해 복호화했다. 암호화하려면 키가 필요한데 키 값은 RANDOMBYTES 함수를 사용해 생성했고 암호화 알고리즘은 AES를 사용했다. 다시 한 번 말하지만 암호화된 데이터를 복호화하려면 암호화 할 때 사용했던 키와 암호화 슈트를 사용해서 복호화해야 한다.

ENCRYPT나 DECRYPT 프로시저는 암호화 대상 데이터, 암호화 및 복호화된 데이터를 BLOB로 변환해야 하는데 보통 암호화 대상 데이터는 문자나 숫자형이 대부분이며 이를 BLOB 타입으로 변환하는 것은 매우 번거롭다. 따라서 보통은 프로시저 대신 ENCRYPT와 DECRYPT 함수를 사용한다.

# 단방향암호화
- 단방향 암호화 해시 함수인 HASH와 MAC 함수를 사용, 이 함수는 단방향이므로 복호화가 매우 어렵고 통상 입력 값에 따라 암호화된 데이터를 비교함으로써 입력 값을 검증하는 데 사용된다.

```swift

   DECLARE
      input_string  VARCHAR2 (200) := 'The Oracle';  -- 입력 VARCHAR2 데이터
      input_raw     RAW(128);                        -- 입력 RAW 데이터

      encrypted_raw RAW (2000); -- 암호화 데이터

      key_string VARCHAR2(8) := 'secret';  -- MAC 함수에서 사용할 비밀 키
      raw_key RAW(128) := UTL_RAW.CAST_TO_RAW(CONVERT(key_string,'AL32UTF8','US7ASCII')); -- 비밀키를 RAW 타입으로 변환

    BEGIN
      -- VARCHAR2를 RAW 타입으로 변환
      input_raw := UTL_I18N.STRING_TO_RAW (input_string, 'AL32UTF8');

      DBMS_OUTPUT.PUT_LINE('----------- HASH 함수 -------------');
    encrypted_raw := DBMS_CRYPTO.HASH( src => input_raw,
                                         typ => DBMS_CRYPTO.HASH_SH1);

      DBMS_OUTPUT.PUT_LINE('입력 문자열의 해시값 : ' || RAWTOHEX(encrypted_raw));

      DBMS_OUTPUT.PUT_LINE('----------- MAC 함수 -------------');
      encrypted_raw := DBMS_CRYPTO.MAC( src => input_raw,
                                        typ => DBMS_CRYPTO.HMAC_MD5,
                                        key => raw_key);

      DBMS_OUTPUT.PUT_LINE('MAC 값 : ' || RAWTOHEX(encrypted_raw));
    END;

```

결과

    ----------- HASH 함수 -------------
    입력 문자열의 해시값 : B095432571F215D1B60DDFCAEA9E483F5E24A084
    ----------- MAC 함수 -------------
    MAC 값 : 10722EA8E9CB57CE953E576D30D87260
    
HASH나 MAC 함수는 보통 비밀번호를 체크하는 데 많이 사용된다. 예를 들어 사용자가 아이디와 비밀번호를 입력하면 이를 체크해 로그인하는 프로그램이 있다고 하자. 대부분은 사용자 테이블에 아이디와 비밀번호를 저장해 둘 텐데 비밀번호 컬럼에 사용자가 입력한 비밀번호를 그대로 저장해 놓는 것이 아니라, 비밀번호로 사용자가 입력한 값이나 이 값과 또 다른 임의의 다른 값을 결합해 이를 HASH나 MAC 함수의 입력 값으로 받아 반환된 결과 값을 비밀번호 컬럼에 저장한다. 이렇게 처리하면 시스템 관리자도 해당 테이블을 조회해 본들 암호화된 값이 들어가 있으므로 사용자의 진짜 비밀번호를 알 수 없고 오직 해당 사용자만이 알 수 있다.

그렇다면 만약 사용자가 비밀번호를 분실했다면 어떻게 해야 할까? 먼저 무작위로 신규 비밀번호를 생성하고 이 번호를 이용해 HASH나 MAC 함수를 태워 변환된 값을 비밀번호 컬럼에 저장해 놓는다. 그리고 나서 사용자에게 신규 비밀번호를 알려준 뒤, 새로운 비밀번호로 변경하게끔 유도해야 한다. 사용자가 비밀번호를 변경하면 변경한 신규 비밀번호를 다시 HASH나 MAC 함수의 매개변수로 받아 그 반환 값을 비밀번호 컬럼에 최종적으로 저장된다. 좀 복잡하긴 하지만 이렇게 처리하면 시스템 관리자조차 사용자의 비밀번호를 알 수 없다.    
    
